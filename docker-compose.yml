version: "3.5"

services:
  traefik:
    image: traefik:latest
    command:
      - --providers.docker.usebindportip=true
      - --providers.docker=true
      - --api.insecure
    ports:
      - "127.0.0.1:80:80"
      - "127.0.0.1:443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./traefik.yml:/traefik.yml"
      - "./traefik_dynamic_conf.yml:/traefik_dynamic_conf.yml"
      - "./certs/localhost.crt:/certs/localhost.crt"
      - "./certs/localhost.key:/certs/localhost.key"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.dev.localhost`)"
      - "traefik.http.routers.traefik.middlewares=https-redirect@file"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.dev.localhost`)"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.service=api@internal"
      - "traefik.docker.network=traefik"

  portainer:
    image: portainer/portainer:latest
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./data/portainer:/data"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=http"
      - "traefik.http.routers.portainer.rule=Host(`portainer.dev.localhost`)"
      - "traefik.http.routers.portainer.middlewares=https-redirect@file"
      - "traefik.http.routers.portainer-secure.entrypoints=https"
      - "traefik.http.routers.portainer-secure.rule=Host(`portainer.dev.localhost`)"
      - "traefik.http.routers.portainer-secure.tls=true"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.docker.network=traefik"
    command: -H unix:///var/run/docker.sock

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - "./data/prometheus/:/etc/prometheus/"
      - "prometheus_data:/prometheus"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    links:
      - cadvisor:cadvisor
    depends_on:
      - cadvisor
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.entrypoints=http"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.dev.localhost`)"
      - "traefik.http.routers.prometheus.middlewares=https-redirect@file"
      - "traefik.http.routers.prometheus-secure.entrypoints=https"
      - "traefik.http.routers.prometheus-secure.rule=Host(`prometheus.dev.localhost`)"
      - "traefik.http.routers.prometheus-secure.tls=true"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.docker.network=traefik"

  grafana:
    image: grafana/grafana:latest
    user: "104"
    depends_on:
      - prometheus
    volumes:
      - "grafana_data:/var/lib/grafana"
      - "./data/grafana/provisioning/:/etc/grafana/provisioning/"
    env_file:
      - "./data/grafana/config.monitoring"
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.entrypoints=http"
      - "traefik.http.routers.grafana.rule=Host(`grafana.dev.localhost`)"
      - "traefik.http.routers.grafana.middlewares=https-redirect@file"
      - "traefik.http.routers.grafana-secure.entrypoints=https"
      - "traefik.http.routers.grafana-secure.rule=Host(`grafana.dev.localhost`)"
      - "traefik.http.routers.grafana-secure.tls=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.docker.network=traefik"

  cadvisor:
    image: google/cadvisor:latest
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cadvisor.entrypoints=http"
      - "traefik.http.routers.cadvisor.rule=Host(`cadvisor.dev.localhost`)"
      - "traefik.http.routers.cadvisor.middlewares=https-redirect@file"
      - "traefik.http.routers.cadvisor-secure.entrypoints=https"
      - "traefik.http.routers.cadvisor-secure.rule=Host(`cadvisor.dev.localhost`)"
      - "traefik.http.routers.cadvisor-secure.tls=true"
      - "traefik.http.services.cadvisor.loadbalancer.server.port=8080"
      - "traefik.docker.network=traefik"

  nodeexporter:
    image: prom/node-exporter:latest
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  blackfire:
    image: blackfire/blackfire
    environment:
      # Exposes the host BLACKFIRE_SERVER_ID and TOKEN environment variables.
      - BLACKFIRE_SERVER_ID
      - BLACKFIRE_SERVER_TOKEN
      # You can also use global environment credentials :
      # BLACKFIRE_SERVER_ID: SERVER-ID
      # BLACKFIRE_SERVER_TOKEN: SERVER-TOKEN

  localstack:
    image: localstack/localstack:latest
    ports: # map localstack ports to host
      - "127.0.0.1:${DYNAMODB_PORT-4569}:4569"
      - "127.0.0.1:${S3_PORT-4572}:4572"
      - "127.0.0.1:${LAMBDA_PORT-4574}:4574"
      - "127.0.0.1:${SNS_PORT-4575}:4575"
      - "127.0.0.1:${SQS_PORT-4576}:4576"
      - "127.0.0.1:${SECRETSMANAGER_PORT-4584}:4584"
      - "127.0.0.1:${CLOUDWATCH_LOGS_PORT-4586}:4586"
    expose: # expose ports to other containers @ localhost
      - "4569"
      - "4572"
      - "4574"
      - "4575"
      - "4576"
      - "4584"
      - "4586"
    environment:
      DEBUG: 1
      LAMBDA_EXECUTOR: local
      DOCKER_HOST: unix:///var/run/docker.sock
      SERVICES: dynamodb,s3,lambda,sns,sqs,secretsmanager
      DEFAULT_REGION: eu-west-1
      HOSTNAME_EXTERNAL: localstack
      DATA_DIR: /tmp/localstack/data
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./data/localstack:/tmp/localstack"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.localstack.entrypoints=http"
      - "traefik.http.routers.localstack.rule=Host(`localstack.dev.localhost`)"
      - "traefik.http.routers.localstack.middlewares=https-redirect@file"
      - "traefik.http.routers.localstack-secure.entrypoints=https"
      - "traefik.http.routers.localstack-secure.rule=Host(`localstack.dev.localhost`)"
      - "traefik.http.routers.localstack-secure.tls=true"
      - "traefik.docker.network=traefik"

  mailhog:
    image: mailhog/mailhog:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.entrypoints=http"
      - "traefik.http.routers.mailhog.rule=Host(`mailhog.dev.localhost`)"
      - "traefik.http.routers.mailhog.middlewares=https-redirect@file"
      - "traefik.http.routers.mailhog-secure.entrypoints=https"
      - "traefik.http.routers.mailhog-secure.rule=Host(`mailhog.dev.localhost`)"
      - "traefik.http.routers.mailhog-secure.tls=true"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"
      - "traefik.docker.network=traefik"

  dockerhost:
    image: qoomon/docker-host
    restart: on-failure
    cap_add: [ 'NET_ADMIN', 'NET_RAW' ]

  sonarqube:
    image: sonarqube
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonarqubedb:5432/sonar
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarqube.entrypoints=http"
      - "traefik.http.routers.sonarqube.rule=Host(`sonarqube.dev.localhost`)"
      - "traefik.http.routers.sonarqube.middlewares=https-redirect@file"
      - "traefik.http.routers.sonarqube-secure.entrypoints=https"
      - "traefik.http.routers.sonarqube-secure.rule=Host(`sonarqube.dev.localhost`)"
      - "traefik.http.routers.sonarqube-secure.tls=true"
      - "traefik.http.services.sonarqube.loadbalancer.server.port=9000"
      - "traefik.docker.network=traefik"

  sonarqubedb:
    image: postgres
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

volumes:
  prometheus_data: {}
  grafana_data: {}
  sonarqube_conf: {}
  sonarqube_data: {}
  sonarqube_extensions: {}
  sonarqube_bundled-plugins: {}
  postgresql: {}
  postgresql_data: {}

networks:
  default:
    name: traefik
    driver_opts:
      com.docker.network.enable_ipv6: "true"
    ipam:
      driver: default
      config:
        - subnet: 192.168.23.76/26
